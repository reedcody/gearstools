#' @import RStoolbox raster
#' @export

# stack_format: "RasterList", "vrt", GDALdrivers...

Image <- function(fname,driver="auto",retrieve_metadata=T,retrieve_stack=F,stack_format="RasterList",
		decompressed_dir=tempdir(),metadata_additions=NULL,overwrite=F,verbose=F)
{
	if(!file.exists(fname))
	{
		stop("File/folder does not exist in the path specified.")
	}
	
	if(!overwrite)
	{
		extras="--keep-old-files"
	} else
	{
		extras=NULL
	}
	
	if(driver=="auto")
	{
	  filename=basename(fname)
	  if(grepl(pattern="^LC08", filename)){driver="OLI_Landsat_8_sr"}
	  if(grepl(pattern="^LE07", filename)){driver="ETM_Landsat_7_sr"}
	  if(grepl(pattern="^LT05", filename)){driver="TM_Landsat_5_sr"}
	  if(grepl(pattern="^LT04", filename)){driver="TM_Landsat_4_sr"}
	}

	# For shortcuts:
	if(is.character(retrieve_stack) || retrieve_stack==T)
	{
		retrieve_stack_internal <- retrieve_stack_shortcuts(retrieve_stack,driver)
	} else {
	  retrieve_stack_internal <- retrieve_stack
	}
	
	# browser()
	
	# Check for compression, add other if need be.
	if(grepl(pattern=".tar.gz$",x=fname))
	{
		fname_files_list <- untar(fname,list=T)
		outdir <- file.path(decompressed_dir,sub('\\.tar.gz$', '',basename(fname)))
		compressed=T
		dir_for_metadata<-outdir
	} else
	{
		if(file.info(fname)$isdir)
		{
			fname_files_list <- list.files(fname)
			dir_for_metadata<-fname
			
		} else
		{
			fname_files_list <- fname
			dir_for_metadata<-dirname(fname)
		}
	}
	
	# READ METADATA:
	if(driver=="OLI_Landsat_8_sr")
	{
		if(verbose) { message("driver=OLI_Landsat_8_sr")}
		metadata <- Image.metadata.OLI_Landsat_8_sr(fname=fname,decompressed_dir=decompressed_dir,extras=extras,verbose=verbose)	
	}
	
	if(driver=="ETM_Landsat_7_sr")
	{
		if(verbose) { message("driver=ETM_Landsat_7_sr")}
		metadata <- Image.metadata.ETM_Landsat_7_sr(fname=fname,decompressed_dir=decompressed_dir,extras=extras,verbose=verbose)	
	}
	
	if(driver=="TM_Landsat_5_sr")
	{
		if(verbose) { message("driver=TM_Landsat_5_sr")}
		metadata <- Image.metadata.TM_Landsat_5_sr(fname=fname,decompressed_dir=decompressed_dir,extras=extras,verbose=verbose)	
	}
	
	if(driver=="TM_Landsat_4_sr")
	{
		if(verbose) { message("driver=TM_Landsat_4_sr")}
		metadata <- Image.metadata.TM_Landsat_4_sr(fname=fname,decompressed_dir=decompressed_dir,extras=extras,verbose=verbose)	
	}
  if(driver=="Climate"){
    if(verbose) { message("driver=Climate")}
    metadata <- Image.metadata.Climate(fname=fname, decompressed_dir=decompressed_dir,verbose=verbose)	
  }
	
	metadata$fname <- fname
	metadata$fname_files_list <- fname_files_list
	metadata$decompressed_dir<-dir_for_metadata
	
	if(is.list(retrieve_stack_internal))
	{
#		browser()
		if(verbose) { message("retrieving stack...")}
		
#			browser()
		match_fnames <- function(pattern,x)
		{
			# Should get some error checking in here.
			return(sapply(X=pattern,FUN=function(X,x) {
								fnames <-  x[grepl(pattern=X,x=x)]
								names(fnames) <- names(X)
								return(fnames) }
							,x=x))
		}
		
		stack_fnames <- lapply(retrieve_stack_internal,FUN=match_fnames,x=fname_files_list)
		
		if(compressed)
		{
			# Need to figure out how to supress messages
			#	outdir <- file.path(decompressed_dir,sub('\\.tar.gz$', '',basename(fname)))
#			if(is.null(extras))
#			{
#				suppressWarnings(untar(fname,files=unlist(stack_fnames),exdir=outdir))
#				
#			} else
#			{
			if(!overwrite)
			{
				stack_fnames_todecompress <- unlist(sapply(X=unlist(stack_fnames),FUN=function(X)
								{
									if(!file.exists(file.path(outdir,X)))
									{
										return(X)
									} else
									{
										return(NULL)
									}
								}))
			} else
			{
				stack_fnames_todecompress <- unlist(stack_fnames)
			}
			if(length(stack_fnames_todecompress) > 0) 
			{
				suppressWarnings(untar(fname,files=stack_fnames_todecompress,exdir=outdir,extras=extras))
			}
			exdir <- outdir
		} else
		{
			# Won't work for single band files
			exdir <- fname
		}
		
		if(stack_format=="RasterList")
		{
			library("raster")
			RasterStacks <- lapply(X=stack_fnames,
					FUN=function(X,exdir)
					{
						RasterStack <- stack(file.path(exdir,X))
						names(RasterStack) <- names(X)
						return(RasterStack)
					},exdir=exdir)
			
			RasterList <- list(RasterStacks=RasterStacks,metadata=metadata)
			return(RasterList)
		}		
	} else
	{
		return(metadata)
	}
}
